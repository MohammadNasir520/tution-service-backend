// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       UserRole @default(user)
  contactNo  String
  profileImg String

  services  Service[]
  reviews   Review[]
  bookings  Booking[]
  carts     Cart[]
  createdAt DateTime  @default(now())

  @@map("users")
}

model Service {
  id          String @id @default(uuid())
  title       String
  image       String
  adminId     String
  admin       User   @relation(fields: [adminId], references: [id])
  price       Float
  description String

  status   ServiceStatus   @default(available)
  category ServiceCategory
  reviews  Review[]
  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carts     Cart[]

  @@map("services")
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id])
  reviewText String
  rating     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reviews")
}

model Booking {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  serviceId     String
  service       Service       @relation(fields: [serviceId], references: [id])
  status        BookingStatus @default(pending)
  paymentStatus paymentStatus @default(unPaid)
  // startDate DateTime
  // endDate   DateTime
  startTime     DateTime
  endTime       DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

model FAQ {
  id String @id @default(uuid())

  question String
  answer   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LatestUpdate {
  id String @id @default(uuid())

  image String
  title String
  text  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(uuid())

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart")
}

enum UserRole {
  super_admin
  admin
  user
}

enum ServiceStatus {
  available
  notAvailable
  upComing
}

enum paymentStatus {
  paid
  unPaid
}

enum ServiceCategory {
  Academic
  SoftSkill
  Religious
}

enum BookingStatus {
  pending
  accepted
  rejected
}
